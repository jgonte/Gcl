/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MatchResults, } from "@stencil/router";
import { Icon, } from "./components/gcl/components/icon/icon";
export namespace Components {
    interface AppHome {
    }
    interface AppProfile {
        "match": MatchResults;
    }
    interface AppRoot {
    }
    interface GclAlert {
        /**
          * The description of the message
         */
        "description": string;
        /**
          * The icon of the alert
         */
        "icon": Icon;
        /**
          * The message of the alert
         */
        "message": string;
        /**
          * Whether to show the icon
         */
        "showIcon": boolean;
        /**
          * The type of the alert
         */
        "type": "info" | "success" | "warning" | "error";
    }
    interface GclButton {
        /**
          * The name of the icon to render on the button
         */
        "icon"?: string;
        /**
          * The label of the button
         */
        "label"?: string;
        /**
          * Specifies whether the icon should horizontally flip with the label when `dir` is `"rtl"`.
         */
        "rtl"?: boolean;
        /**
          * The type of the button
         */
        "type": "button" | "reset" | "submit";
        /**
          * The variant of the button
         */
        "variant": "default" | "primary" | "dashed" | "link" | "danger";
    }
    interface GclCard {
    }
    interface GclIcon {
        /**
          * The color of the icon.
         */
        "color"?: string;
        /**
          * Specifies which icon to use from the built-in set of icons.
         */
        "name"?: string;
        /**
          * Specifies whether the icon should horizontally flip when `dir` is `"rtl"`.
         */
        "rtl"?: boolean;
        /**
          * The size of the icon.
         */
        "size"?: "small" | "large";
    }
    interface GclModal {
    }
    interface GclOverlay {
        "visible": boolean;
    }
    interface GclText {
        /**
          * The key to retrieve a localized value from an i18n provider
         */
        "intlKey": string;
        /**
          * The provider to retrieve the value for the key
         */
        "intlProvider": IntlProvider;
        /**
          * The value of the text to render
         */
        "value": string;
    }
}
declare global {
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLGclAlertElement extends Components.GclAlert, HTMLStencilElement {
    }
    var HTMLGclAlertElement: {
        prototype: HTMLGclAlertElement;
        new (): HTMLGclAlertElement;
    };
    interface HTMLGclButtonElement extends Components.GclButton, HTMLStencilElement {
    }
    var HTMLGclButtonElement: {
        prototype: HTMLGclButtonElement;
        new (): HTMLGclButtonElement;
    };
    interface HTMLGclCardElement extends Components.GclCard, HTMLStencilElement {
    }
    var HTMLGclCardElement: {
        prototype: HTMLGclCardElement;
        new (): HTMLGclCardElement;
    };
    interface HTMLGclIconElement extends Components.GclIcon, HTMLStencilElement {
    }
    var HTMLGclIconElement: {
        prototype: HTMLGclIconElement;
        new (): HTMLGclIconElement;
    };
    interface HTMLGclModalElement extends Components.GclModal, HTMLStencilElement {
    }
    var HTMLGclModalElement: {
        prototype: HTMLGclModalElement;
        new (): HTMLGclModalElement;
    };
    interface HTMLGclOverlayElement extends Components.GclOverlay, HTMLStencilElement {
    }
    var HTMLGclOverlayElement: {
        prototype: HTMLGclOverlayElement;
        new (): HTMLGclOverlayElement;
    };
    interface HTMLGclTextElement extends Components.GclText, HTMLStencilElement {
    }
    var HTMLGclTextElement: {
        prototype: HTMLGclTextElement;
        new (): HTMLGclTextElement;
    };
    interface HTMLElementTagNameMap {
        "app-home": HTMLAppHomeElement;
        "app-profile": HTMLAppProfileElement;
        "app-root": HTMLAppRootElement;
        "gcl-alert": HTMLGclAlertElement;
        "gcl-button": HTMLGclButtonElement;
        "gcl-card": HTMLGclCardElement;
        "gcl-icon": HTMLGclIconElement;
        "gcl-modal": HTMLGclModalElement;
        "gcl-overlay": HTMLGclOverlayElement;
        "gcl-text": HTMLGclTextElement;
    }
}
declare namespace LocalJSX {
    interface AppHome {
    }
    interface AppProfile {
        "match"?: MatchResults;
    }
    interface AppRoot {
    }
    interface GclAlert {
        /**
          * The description of the message
         */
        "description"?: string;
        /**
          * The icon of the alert
         */
        "icon"?: Icon;
        /**
          * The message of the alert
         */
        "message"?: string;
        /**
          * Whether to show the icon
         */
        "showIcon"?: boolean;
        /**
          * The type of the alert
         */
        "type"?: "info" | "success" | "warning" | "error";
    }
    interface GclButton {
        /**
          * The name of the icon to render on the button
         */
        "icon"?: string;
        /**
          * The label of the button
         */
        "label"?: string;
        /**
          * Specifies whether the icon should horizontally flip with the label when `dir` is `"rtl"`.
         */
        "rtl"?: boolean;
        /**
          * The type of the button
         */
        "type"?: "button" | "reset" | "submit";
        /**
          * The variant of the button
         */
        "variant"?: "default" | "primary" | "dashed" | "link" | "danger";
    }
    interface GclCard {
    }
    interface GclIcon {
        /**
          * The color of the icon.
         */
        "color"?: string;
        /**
          * Specifies which icon to use from the built-in set of icons.
         */
        "name"?: string;
        /**
          * Specifies whether the icon should horizontally flip when `dir` is `"rtl"`.
         */
        "rtl"?: boolean;
        /**
          * The size of the icon.
         */
        "size"?: "small" | "large";
    }
    interface GclModal {
    }
    interface GclOverlay {
        "visible"?: boolean;
    }
    interface GclText {
        /**
          * The key to retrieve a localized value from an i18n provider
         */
        "intlKey"?: string;
        /**
          * The provider to retrieve the value for the key
         */
        "intlProvider"?: IntlProvider;
        /**
          * The value of the text to render
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "app-home": AppHome;
        "app-profile": AppProfile;
        "app-root": AppRoot;
        "gcl-alert": GclAlert;
        "gcl-button": GclButton;
        "gcl-card": GclCard;
        "gcl-icon": GclIcon;
        "gcl-modal": GclModal;
        "gcl-overlay": GclOverlay;
        "gcl-text": GclText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "gcl-alert": LocalJSX.GclAlert & JSXBase.HTMLAttributes<HTMLGclAlertElement>;
            "gcl-button": LocalJSX.GclButton & JSXBase.HTMLAttributes<HTMLGclButtonElement>;
            "gcl-card": LocalJSX.GclCard & JSXBase.HTMLAttributes<HTMLGclCardElement>;
            "gcl-icon": LocalJSX.GclIcon & JSXBase.HTMLAttributes<HTMLGclIconElement>;
            "gcl-modal": LocalJSX.GclModal & JSXBase.HTMLAttributes<HTMLGclModalElement>;
            "gcl-overlay": LocalJSX.GclOverlay & JSXBase.HTMLAttributes<HTMLGclOverlayElement>;
            "gcl-text": LocalJSX.GclText & JSXBase.HTMLAttributes<HTMLGclTextElement>;
        }
    }
}
